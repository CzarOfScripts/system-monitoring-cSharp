name: Build, Publish, and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get version
        id: get_version
        shell: pwsh
        run: |
          $assemblyInfoPath = "SystemMonitoring/Properties/AssemblyInfo.cs"
          if (-Not (Test-Path $assemblyInfoPath)) {
            Write-Error "AssemblyInfo.cs not found at $assemblyInfoPath"
            exit 1
          }
          $content = Get-Content -Path $assemblyInfoPath
          $versionLine = $content | Where-Object { $_ -match '^\s*\[assembly:\s*AssemblyVersion\("([^"]+)"\)\]' }
          if (-Not $versionLine) {
            Write-Error "AssemblyVersion not found in $assemblyInfoPath"
            exit 1
          }
          $version = ($versionLine -replace '^\s*\[assembly:\s*AssemblyVersion\("([^"]+)"\)\].*', '$1')
          echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          
      - name: Debug version output
        run: |
          echo "Detected version: ${{ steps.get_version.outputs.version }}"

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Clean the project
        run: msbuild "SystemMonitoring/system-monitoring.csproj" /t:Clean /p:Configuration=Release

      - name: Restore NuGet packages
        run: nuget restore

      - name: Build the project
        run: msbuild "SystemMonitoring/system-monitoring.csproj" /p:Configuration=Release /p:OutputPath=${{ github.workspace }}/publish

      - name: List files in publish directory
        run: ls -R ./publish

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: System-Monitoring-v${{ steps.get_version.outputs.version }}
          path: ./publish

      - name: Create Release (Draft)
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: false

      - name: Upload Release Asset (ZIP)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/System-Monitoring-v${{ steps.get_version.outputs.version }}.zip
          asset_name: System-Monitoring-v${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip
